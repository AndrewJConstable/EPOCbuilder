/*******************************************************************************
 * Element.java
 * =============================================================================
 * Copyright (c) 2009-2010 Australian Antarctic Division. All rights reserved.
 * Author can be contacted at troy.robertson@aad.gov.au.
 *
 * Every effort has been taken in making sure that the source code is
 * technically accurate, but I disclaim any and all responsibility for any loss,
 * damage or destruction of data or any other property which may arise from
 * relying on it. I will in no case be liable for any monetary damages arising
 * from such loss, damage or destruction.
 *
 * As with any code, ensure this code is tested in a development environment
 * before attempting to run it in production.
 * =============================================================================
 */
package au.gov.aad.erm.EPOC_Builder;

import static au.gov.aad.erm.EPOC_Builder.Constants.*;

import java.util.*;
import java.awt.Font;
import java.awt.Color;
import javax.swing.*;
import com.toedter.calendar.*;
import java.awt.event.*;
import java.beans.PropertyChangeListener;

/*******************************************************************************
 * GUI for Element object.
 * Allows display and data entry for Element objects.
 *
 * @author Troy Robertson
 * @company Australian Antarctic Division
 * @created 10/09/2009
 * @version 0.4.0, 01-09-2010
 ******************************************************************************/
public class ElementUI extends OpposingPanelUI {

    private Universe universe;
    private Element element;

    JCheckBox bday;
    boolean bdaySet;

    /** Creates new form ElementUI */
    public ElementUI(Element ele, Universe uni) {

        initComponents();
        universe = uni;
        element = ele;

        loadForm();
        loadEClasses();
        loadPolygons();
        jTextShortName.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextShortName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextVersion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaDesc = new javax.swing.JTextArea();
        jButtonBirthday = new javax.swing.JButton();
        jTextBDay = new javax.swing.JTextField();
        jTextBMonth = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextCreated = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextModified = new javax.swing.JTextField();
        jTextID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextCreator = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListSelectedPolygons = new javax.swing.JList();
        jComboEClass = new javax.swing.JComboBox();
        jButtonDateDelete = new javax.swing.JButton();
        jButtonDatePicker = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListTimesteps = new javax.swing.JList();
        jLabel30 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTextName = new javax.swing.JTextField();

        jTextShortName.setColumns(20);
        jTextShortName.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextShortName.setToolTipText("Short Name");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Element:");
        jLabel1.setRequestFocusEnabled(false);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setPreferredSize(new java.awt.Dimension(580, 402));

        jLabel2.setText("Revision:");
        jLabel2.setRequestFocusEnabled(false);

        jTextVersion.setEditable(false);
        jTextVersion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextVersion.setPreferredSize(new java.awt.Dimension(200, 18));

        jLabel3.setText("Birthday:");
        jLabel3.setRequestFocusEnabled(false);

        jLabel4.setText("/");
        jLabel4.setRequestFocusEnabled(false);

        jLabel5.setText("(dd/mm)");
        jLabel5.setRequestFocusEnabled(false);

        jLabel6.setText("Polygons:");
        jLabel6.setRequestFocusEnabled(false);

        jLabel7.setText("Description:");
        jLabel7.setRequestFocusEnabled(false);

        jTextAreaDesc.setColumns(20);
        jTextAreaDesc.setFont(new java.awt.Font("Tahoma", 0, 11));
        jTextAreaDesc.setRows(3);
        jScrollPane1.setViewportView(jTextAreaDesc);

        jButtonBirthday.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calendar.png"))); // NOI18N
        jButtonBirthday.setToolTipText("Choose date");
        jButtonBirthday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBirthdayActionPerformed(evt);
            }
        });

        jTextBDay.setEditable(false);
        jTextBDay.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextBMonth.setEditable(false);
        jTextBMonth.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setText("Created:");

        jTextCreated.setBackground(new java.awt.Color(212, 208, 200));
        jTextCreated.setEditable(false);
        jTextCreated.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextCreated.setPreferredSize(new java.awt.Dimension(200, 18));

        jLabel9.setText("Modified:");

        jTextModified.setBackground(new java.awt.Color(212, 208, 200));
        jTextModified.setEditable(false);
        jTextModified.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextModified.setPreferredSize(new java.awt.Dimension(200, 18));
        jTextModified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextModifiedActionPerformed(evt);
            }
        });

        jTextID.setPreferredSize(new java.awt.Dimension(200, 18));

        jLabel10.setText("EPOC ID:");

        jLabel11.setText("EPOC Class:");

        jLabel12.setText("Author(s):");

        jScrollPane4.setViewportView(jListSelectedPolygons);

        jComboEClass.setMinimumSize(new java.awt.Dimension(25, 18));
        jComboEClass.setPreferredSize(new java.awt.Dimension(29, 20));

        jButtonDateDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cross.png"))); // NOI18N
        jButtonDateDelete.setToolTipText("Remove date");
        jButtonDateDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDateDeleteActionPerformed(evt);
            }
        });

        jButtonDatePicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/calendar.png"))); // NOI18N
        jButtonDatePicker.setToolTipText("Choose dates");
        jButtonDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDatePickerActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBar(null);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 60));

        jListTimesteps.setVisibleRowCount(3);
        jScrollPane3.setViewportView(jListTimesteps);

        jLabel30.setText("Action");

        jLabel14.setText("Timing");

        jLabel13.setText("Type");

        jLabel15.setText("End");

        jLabel16.setText("Start");

        jLabel17.setText("Timesteps:");

        jLabel31.setText("Dataset");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel12))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                            .addComponent(jTextCreator, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jTextBDay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextBMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(28, 28, 28))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(26, 26, 26)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextCreated, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextVersion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboEClass, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextModified, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addComponent(jLabel15)
                        .addGap(48, 48, 48)
                        .addComponent(jLabel13)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel14)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonDateDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextCreated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jTextID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextModified, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jComboEClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextCreator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jTextBDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(jTextBMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(jButtonBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel30)
                        .addComponent(jLabel16))
                    .addComponent(jLabel31)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15))
                .addGap(0, 0, 0)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDateDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTextName.setColumns(100);
        jTextName.setToolTipText("Full Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(24, 24, 24)
                        .addComponent(jTextShortName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextName, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextShortName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBirthdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBirthdayActionPerformed
        // Construct a date picker panel
        JMonthChooser jmc = new JMonthChooser();
        JDayChooser jdc = new JDayChooser();
        JPanel picker = new JPanel();
        picker.setLayout(new BoxLayout(picker, BoxLayout.PAGE_AXIS));
        picker.add(jmc);
        picker.add(jdc);

        // Set current birth day and month
        if (!jTextBDay.getText().equals("0")) {
            jdc.setDay(Integer.parseInt(jTextBDay.getText()));
            jmc.setMonth(Integer.parseInt(jTextBMonth.getText())-1);
        }

        final JOptionPane pane = new JOptionPane(picker, JOptionPane.PLAIN_MESSAGE,
                JOptionPane.DEFAULT_OPTION);
        JDialog dialog = pane.createDialog(this, "Select birthday");
        dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
        dialog.setLocationRelativeTo(this);
        dialog.pack();
        dialog.setVisible(true);

        jTextBDay.setText(String.valueOf(jdc.getDay()));
        jTextBMonth.setText(String.valueOf(jmc.getMonth()+1));
}//GEN-LAST:event_jButtonBirthdayActionPerformed

    private void jTextModifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextModifiedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextModifiedActionPerformed

    private void jButtonDateDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDateDeleteActionPerformed
        if (jListTimesteps.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "A valid Timestep must be selected first!");
            return;
        }

        // get timestep and put it in delete list to be deleted on action save
        Timestep ts = (Timestep)jListTimesteps.getSelectedValue();
        if (ts.getUID() > 0) {
            element.addDeleteList(ts);
        }

        element.getTimesteps().remove((Timestep)jListTimesteps.getSelectedValue());

        loadTimesteps();
        setModified(true);
}//GEN-LAST:event_jButtonDateDeleteActionPerformed

    private void jButtonDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDatePickerActionPerformed
        int stDay = 0, stMth = 0, enDay = 0, enMth = 0, sType = TS_ALL, sTime = TS_BEF;
        JDialog dialog = null;

        // item must be selected unless this is the first item to be added
        if (jListTimesteps.getSelectedIndex() < 0 && element.getTimesteps().size() > 0) {
            return;
        } else if (jListTimesteps.getSelectedIndex() < 0) {
            // if so then set selected to be the 'New ...' item
            jListTimesteps.setSelectedIndex(0);
        }
        Timestep selTS = (Timestep)jListTimesteps.getSelectedValue();

        // Get input for action
        ArrayList actList = new ArrayList();
        // Add dummy NULL
        Action act = new Action("");
        act.setShortName("NULL");
        actList.add(act);
        Action currAct = act;

        // Add element actions or templated ones
        if (element != null) {
            actList.addAll(element.getActions());
        } else {
            actList.addAll(element.getTemplates().getTemplateList(OBJ_ACT));
        }
        // Add selected action
        if (selTS.getAction() != null) {
            if (!actList.contains(selTS.getAction())) actList.add(selTS.getAction());
            currAct = selTS.getAction();
        }

        ListSelectorUI selUI = new ListSelectorUI("Enter Action for this timestep.", actList, currAct);
        final JOptionPane actPane = new JOptionPane(selUI, JOptionPane.QUESTION_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION);
        dialog = actPane.createDialog(this, "Select action:");
        dialog.setLocationRelativeTo(this);
        dialog.pack();
        dialog.setVisible(true);

        // Make sure a valid response was returned
        Object selVal = actPane.getValue();
        if (selVal == null || selVal == JOptionPane.UNINITIALIZED_VALUE) return;
        if(selVal instanceof Integer && ((Integer)selVal).intValue() == JOptionPane.CANCEL_OPTION) return;
        int choice = selUI.getSelectionIndex();
        if (choice < 0) return;

        EPOCObject sAct = (EPOCObject)actList.get(choice);
        if (sAct.equals(act)) sAct = null;

        // Construct a date picker panel
        JMonthChooser jmc = new JMonthChooser();
        bday = new JCheckBox();
        bday.setText("Use Birthday");
        bday.addItemListener(new CheckboxListener());
        JDayChooser jdc = new JDayChooser();
        //jmc.addInputMethodListener(new MonthInputListener(jdc));
        jmc.addPropertyChangeListener(new MonthPropertyListener(jdc));

        JPanel top = new JPanel();
        top.add(jmc);
        top.add(bday);
        JPanel picker = new JPanel();
        picker.setLayout(new BoxLayout(picker, BoxLayout.PAGE_AXIS));
        picker.add(top);
        picker.add(jdc);

        // Set current start day and month
        bdaySet = false;
        if (selTS.getStartMonth() != 0) {
            if (selTS.getStartMonth() == 99) {
                bdaySet = true;
            } else {
                jdc.setMonth(selTS.getStartMonth()-1);
                jdc.setDay(selTS.getStartDay());
                jmc.setMonth(selTS.getStartMonth()-1);
            }
        }
        bday.setSelected(bdaySet);

        final JOptionPane pane = new JOptionPane(picker, JOptionPane.PLAIN_MESSAGE,
                JOptionPane.DEFAULT_OPTION);
        dialog = pane.createDialog(this, "Select start day:");
        dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
        dialog.setLocationRelativeTo(this);
        dialog.pack();
        dialog.setVisible(true);

        if (bdaySet) {
            stDay = 99;
            stMth = 99;
        } else {
            stDay = jdc.getDay();
            stMth = jmc.getMonth() + 1;
        }

        // set current end day and month, else selected start day and month
        bdaySet = false;
        if (selTS.getStartMonth() != 0) {
            if (selTS.getEndMonth() == 99) {
                bdaySet = true;
            } else {
                jdc.setDay(selTS.getEndDay());
                jmc.setMonth(selTS.getEndMonth()-1);
            }
        } else {
            if (stMth == 99) {
                bdaySet = true;
            } else {
                jdc.setDay(stDay);
                jmc.setMonth(stMth-1);
            }
        }
        bday.setSelected(bdaySet);

        dialog = pane.createDialog(this, "Select end day:");
        dialog.setDefaultCloseOperation(dialog.DO_NOTHING_ON_CLOSE);
        dialog.setLocationRelativeTo(this);
        dialog.pack();
        dialog.setVisible(true);

        if (bdaySet) {
            enDay = 99;
            enMth = 99;
        } else {
            enDay = jdc.getDay();
            enMth = jmc.getMonth() + 1;
        }

        // Check that selected dates do not overlap with existing dates
        Timestep overlap = element.getOverlappingTimestep(stDay, stMth, enDay, enMth,
                (element != null ? element.getBirthDay() : 0),
                (element != null ? element.getBirthMonth() : 0));
        if (overlap != null && overlap != selTS) {
            JOptionPane.showMessageDialog(this, "Timestep overlaps with an existing Timestep!");
            return;
        }

        // Now get input on step type if start and end are not the same
        //if (stDay != enDay || stMth != enMth) {
        String oldType = "All Periods";
        if (selTS.getStepType() == TS_FST) oldType = "First Period";
        if (selTS.getStepType() == TS_LST) oldType = "Last Period";

        Object[] types = {"All Periods", "First Period", "Last Period"};
        String s = (String)JOptionPane.showInputDialog(this,
                "Enter period at which Action is to be executed.", "Select step type:",
                JOptionPane.PLAIN_MESSAGE, null, types, oldType);
        if (s == null) return;
        if (s.equals("All Periods")) sType = TS_ALL;
        if (s.equals("First Period")) sType = TS_FST;
        if (s.equals("Last Period")) sType = TS_LST;

        // Now get input on step timing
        String oldTiming = "Before";
        if (selTS.getStepTiming() == TS_DUR) oldTiming = "During";
        if (selTS.getStepTiming() == TS_AFT) oldTiming = "After";

        Object[] timings = {"Before", "During", "After"};
        String t = (String)JOptionPane.showInputDialog(this,
                "Enter timing at which Action is to be executed.", "Select step timing:",
                JOptionPane.PLAIN_MESSAGE, null, timings, oldTiming);
        if (t == null) return;
        if (t.equals("Before")) sTime = TS_BEF;
        if (t.equals("During")) sTime = TS_DUR;
        if (t.equals("After")) sTime = TS_AFT;

        // Get input for dataset
        ArrayList attrList = new ArrayList();
        // Add dummy NULL
        Attribute attr = new Attribute();
        attr.setRevision("");
        attr.setShortName("NULL");
        attrList.add(attr);
        Attribute currDS = attr;

        // Add element attributes or templated ones
        if (element != null) {
            attrList.addAll(element.getAttributes());
        } else {
            attrList.addAll(element.getTemplates().getTemplateList(OBJ_ATT));
        }
        // Add selected dataset
        if (selTS.getDataset() != null) {
            if (!attrList.contains(selTS.getDataset())) attrList.add(selTS.getDataset());
            currDS = selTS.getDataset();
        }

        selUI = new ListSelectorUI("Enter dataset to be passed to Action at this timestep.", attrList, currDS);
        final JOptionPane dsPane = new JOptionPane(selUI, JOptionPane.QUESTION_MESSAGE,
                JOptionPane.OK_CANCEL_OPTION);
        dialog = dsPane.createDialog(this, "Select dataset:");
        dialog.setLocationRelativeTo(this);
        dialog.pack();
        dialog.setVisible(true);

        // Make sure a valid response was returned
        selVal = dsPane.getValue();
        if (selVal == null || selVal == JOptionPane.UNINITIALIZED_VALUE) return;
        if(selVal instanceof Integer && ((Integer)selVal).intValue() == JOptionPane.CANCEL_OPTION) return;
        choice = selUI.getSelectionIndex();
        if (choice < 0) return;
        EPOCObject sAttr = (EPOCObject)attrList.get(choice);
        if (sAttr.equals(attr)) sAttr = null;
        
        // Alter timestep
        selTS.setAction((Action)sAct);
        selTS.setParentUID(element.getUID());
        selTS.setSteps(stDay, stMth, enDay, enMth);
        selTS.setStepType(sType);
        selTS.setStepTiming(sTime);
        selTS.setDataset((Attribute)sAttr);

        // Check if "New..." selected
        if (jListTimesteps.getSelectedIndex() == 0) element.addTimestep(selTS);

        loadTimesteps();
        setModified(true);
}//GEN-LAST:event_jButtonDatePickerActionPerformed

    private void loadForm() {
        jTextShortName.setText(element.getShortName());
        // bold templates
        if (element.isTemplate()) {
            jTextShortName.setFont(jTextShortName.getFont().deriveFont(Font.BOLD));
        } else {
            jTextShortName.setFont(jTextShortName.getFont().deriveFont(Font.PLAIN));
        }
        jTextName.setText(element.getName());
        jTextVersion.setText(element.getRevision());
        jTextCreated.setText(element.getFormattedCreated());
        jTextModified.setText(element.getFormattedModified());
        //jTextClassname.setText(element.getEPOCClassName());
        jTextID.setText(element.getEPOCID());
        jTextBDay.setText(String.valueOf(element.getBirthDay()));
        jTextBMonth.setText(String.valueOf(element.getBirthMonth()));
        jTextAreaDesc.setText(element.getDescription());
        jTextCreator.setText(element.getAuthor());
    }

    private void loadEClasses() {
        EClass selObj = null;
        ArrayList availList = new ArrayList();

        // add dummy none item
        EClass dummy = new EClass();
        dummy.setRevision("");
        dummy.setShortName("NULL");
        jComboEClass.addItem(dummy);
        selObj = dummy;

        // get templated eclasses
        availList.addAll(element.getTemplates().getTemplateList(OBJ_CLS));

        // make sure selected object is in there, even if it is just a broken link
        if (element.getEClass() != null) {
            jComboEClass.setFont(jComboEClass.getFont().deriveFont(Font.BOLD));
            if (element.getEClass().isBroken()) {
                jComboEClass.setBackground(Color.RED);
                jComboEClass.setForeground(Color.WHITE);
            }
            if (!availList.contains(element.getEClass())) jComboEClass.addItem(element.getEClass());
            selObj = element.getEClass();
        }
        Collections.sort(availList, new EPOCObjectListComparator());

        // but only add Actions of type setup (oh and broken links)
        for (Object ecObj : availList) jComboEClass.addItem(ecObj);

        // set selected
        jComboEClass.setSelectedItem(selObj);

        jComboEClass.setRenderer(new EPOCObjectListRenderer());
    }
    
    private void loadPolygons() {
        if (universe.getSpatial() == null || universe.getSpatial().getPolygonsVector() == null) return;
        
        Vector psVector = universe.getSpatial().getPolygonsVector();
        if (psVector.size() <= 0) return;
        String[] pArr = new String[psVector.size()];
        int i = 0;

        // Extract a list of polygon names
        for (Object pObj : psVector) {
            pArr[i] = (String)((Vector)pObj).get(0);
            i++;
        }
        if (pArr.length == 0 || (pArr.length < element.getPolygons().get(element.getPolygons().size() - 1))) {
            // Universe has no polys or not enough anyway
            // Have to add some extras as dummys
            String[] dummyArr = new String[element.getPolygons().get(element.getPolygons().size() - 1)];
            for (i = 0 ; i < pArr.length ; i ++) dummyArr[i] = pArr[i];
            for ( ; i < dummyArr.length ; i++) {
                dummyArr[i] = "Missing polygon " + (i + 1);
            }
            pArr = dummyArr;
        }

        jListSelectedPolygons.setListData(pArr);
        int[] sIndxs = new int[element.getPolygons().size()];
        i = 0;
        for (int pNum : element.getPolygons()) {
            if (pNum - 1 >= 0 && pNum - 1 < pArr.length)
            sIndxs[i] = pNum - 1;
            i++;
        }
        jListSelectedPolygons.setSelectedIndices(sIndxs);
    }

    private void loadTimesteps() {
        Timestep[] list = element.getTimestepArray(true);

        jListTimesteps.setListData(list);
        //create Renderer and display
        jListTimesteps.setCellRenderer(new TimestepCellRenderer());
    }
    /*
     * Set editability of form
     */
    public void editable(boolean editable) {
        // Element tab
        jTextShortName.setEditable(editable);
        jTextName.setEditable(editable);
        jTextID.setEditable(editable);
        //jTextClassname.setEditable(editable);
        jComboEClass.setEnabled(editable);
        jButtonBirthday.setEnabled(editable);
        jListSelectedPolygons.setEnabled(editable);
        jTextAreaDesc.setEditable(editable);
        jTextCreator.setEditable(editable);
    }
     
    /**
     * Check if form data differs from object data.  If passes tests then update
     * object with form data
     * @return
     */
    @Override
    public int saveIfModified() {
        // Check if form data has been modified, if so update object
        if (isModified()) {
            setWasModified(true);

            // Check if required fields are filled adequately
            if (!EPOCObject.testName(jTextShortName.getText())) {
                JOptionPane.showMessageDialog(this, "Please provide a shortname for element first!\n\n" +
                         "Element must be named and may only contain\n" +
                         "alphanumerics, '.' or '_'\n" +
                         "It may only start with an alphabetic character\n" +
                         "and may not end in '.' or '_'");
                return EPOC_FAIL;
            }

            if (!jTextID.getText().equals("")) {
                try {
                    int i = Integer.parseInt(jTextID.getText());
                    if (i <= 0) throw new NumberFormatException();
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "ID must be a valid integer.");
                    return EPOC_FAIL;
                }
            }

            if (jTextAreaDesc.getText().length() > 512) {
                JOptionPane.showMessageDialog(this, "The description field is limited to only 512 characters!");
                return EPOC_FAIL;
            }

            if (jTextBDay.getText().equals("0") || jTextBMonth.getText().equals("0")) {
                JOptionPane.showMessageDialog(this, "Please specify a birth date for element first!");
                return EPOC_FAIL;
            }

            // update modified
            element.setModifiedNow();
            element.setShortName(jTextShortName.getText());
            element.setName(jTextName.getText());
            element.setEPOCID(jTextID.getText());
            //element.setEPOCClassName(jTextClassname.getText());
            if (jComboEClass.getSelectedIndex() <= 0) {
                element.setEClass(null);
            } else {
                element.setEClass((EClass)jComboEClass.getSelectedItem());
            }
            element.setBirthDate(Integer.parseInt(jTextBDay.getText()),
                                Integer.parseInt(jTextBMonth.getText()));
            // Save selected polygon indexes
            element.getPolygons().clear();
            for (int i : jListSelectedPolygons.getSelectedIndices()) {
                element.addPolygon(i+1);
            }
            element.setDescription(jTextAreaDesc.getText());
            element.setAuthor(jTextCreator.getText());

            setModified(false);
            return EPOC_SUCC;
        }

        setWasModified(false);
        return EPOC_NONE;
    }

    /**
     * Have form values been modified when compared to stored object data
     * @return boolean
     */
    public boolean isModified() {
        if (super.isModified()) return true;
        if (!element.getName().equals(jTextName.getText())) return true;
        if (!element.getShortName().equals(jTextShortName.getText())) return true;
        if (!element.getEPOCID().equals(jTextID.getText())) return true;
        //if (!element.getEPOCClassName().equals(jTextClassname.getText())) return true;
        if (element.getEClass() == null && jComboEClass.getSelectedIndex() > 0) return true;
        if (element.getEClass() != null && jComboEClass.getSelectedIndex() <= 0) return true;
        if (element.getEClass() != null && !element.getEClass().equals((EClass)jComboEClass.getSelectedItem())) return true;
        if (element.getBirthDay() != Integer.parseInt(jTextBDay.getText())) return true;
        if (element.getBirthMonth() != Integer.parseInt(jTextBMonth.getText())) return true;
        if (!element.getDescription().equals(jTextAreaDesc.getText())) return true;
        if (!element.getAuthor().equals(jTextCreator.getText())) return true;
        // Test that selected Polygons have not changed
        ArrayList pList = element.getPolygons();
        int[] sArr = jListSelectedPolygons.getSelectedIndices();
        if (pList.size() != sArr.length) return true;
        ArrayList sList = new ArrayList();
        for (Object sObj : sArr) {
            int sObjInt = Integer.parseInt(sObj.toString()) + 1;
            if (!pList.contains(sObjInt)) return true;
            sList.add(sObjInt);
        }
        for (Object pObj : pList) {
            if (!sList.contains(Integer.parseInt(pObj.toString()))) return true;
        }

        return false;
    }

    public EPOCObject getObject() {
        return element;
    }

    public class CheckboxListener implements ItemListener {
              // now the event listeners
        public void itemStateChanged(ItemEvent ie) {

            Object source = ie.getItem();
            if (source == bday) {
                if (ie.getStateChange() == ItemEvent.SELECTED) {
                    bdaySet = true;
                } else {
                    bdaySet = false;
                }
            }
        }
    }

    public class MonthPropertyListener implements PropertyChangeListener {
        private JDayChooser jdc = null;

        public MonthPropertyListener(JDayChooser dc) {
            jdc = dc;
        }

        public void propertyChange(java.beans.PropertyChangeEvent e) {
            if (e.getPropertyName().equals("month")) {
                jdc.setMonth(((JMonthChooser)e.getSource()).getMonth());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBirthday;
    private javax.swing.JButton jButtonDateDelete;
    private javax.swing.JButton jButtonDatePicker;
    private javax.swing.JComboBox jComboEClass;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jListSelectedPolygons;
    private javax.swing.JList jListTimesteps;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextAreaDesc;
    private javax.swing.JTextField jTextBDay;
    private javax.swing.JTextField jTextBMonth;
    private javax.swing.JTextField jTextCreated;
    private javax.swing.JTextField jTextCreator;
    private javax.swing.JTextField jTextID;
    private javax.swing.JTextField jTextModified;
    private javax.swing.JTextField jTextName;
    private javax.swing.JTextField jTextShortName;
    private javax.swing.JTextField jTextVersion;
    // End of variables declaration//GEN-END:variables

}
